?t.test
p1 = ggplot(data = ToothGrowth, aes(x = dose, y = len)) + geom_boxplot()
p1
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5], ToothGrowth$len[ToothGrowth$dose == 1], alternative = "two-sided", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5], ToothGrowth$len[ToothGrowth$dose == 1], alternative = "two.sided", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5], ToothGrowth$len[ToothGrowth$dose == 1], alternative = "less", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5], ToothGrowth$len[ToothGrowth$dose == 1], alternative = "less", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 1], ToothGrowth$len[ToothGrowth$dose == 2], alternative = "less", var.equal = TRUE)
p2 = ggplot(data = ToothGrowth, aes(x = supp, y = len)) + geom_boxplot()
p2
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp = "OJ"], ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp = "VC"], alternative = "two-sided", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ"], ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC"], alternative = "two-sided", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ"], ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC"], alternative = "two.sided", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ"], ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC"], alternative = "two.sided", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 1 & ToothGrowth$supp == "OJ"], ToothGrowth$len[ToothGrowth$dose == 1 & ToothGrowth$supp == "VC"], alternative = "two.sided", var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$dose == 2 & ToothGrowth$supp == "OJ"], ToothGrowth$len[ToothGrowth$dose == 2 & ToothGrowth$supp == "VC"], alternative = "two.sided", var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ"], ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC"], alternative = "two.sided", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 1 & ToothGrowth$supp == "OJ"], ToothGrowth$len[ToothGrowth$dose == 1 & ToothGrowth$supp == "VC"], alternative = "two.sided", var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$dose == 2 & ToothGrowth$supp == "OJ"], ToothGrowth$len[ToothGrowth$dose == 2 & ToothGrowth$supp == "VC"], alternative = "two.sided", var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ"], ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC"], alternative = "two.sided", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 1 & ToothGrowth$supp == "OJ"], ToothGrowth$len[ToothGrowth$dose == 1 & ToothGrowth$supp == "VC"], alternative = "two.sided", var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$dose == 2 & ToothGrowth$supp == "OJ"], ToothGrowth$len[ToothGrowth$dose == 2 & ToothGrowth$supp == "VC"], alternative = "two.sided", var.equal = FALSE)
p2 = ggplot(data = ToothGrowth, aes(x = dose, y = len)) + geom_boxplot() +
facet_grid(. ~ supp)
p2
p3 = ggplot(ToothGrowth, aes(x = len)) + facet_grid(. ~ dose)
p3 = p3 + geom_histogram(aes(y = ..density..), bins = 40, color = "black", fill = "white")
p3 = p3 + stat_function(fun = dnorm, args = list(mean = mean(ToothGrowth$len),
sd = sd(ToothGrowth$len)), color = "red")
p3 = p3 + labs(x = "Tooth length", y = "Density",
title = "Comparison of empirical density function with theoretical one")
p3
p3 = ggplot(ToothGrowth, aes(x = len)) + facet_grid(. ~ dose)
p3 = p3 + geom_histogram(aes(y = ..density..), bins = 40, color = "black", fill = "white")
p3 = p3 + stat_function(fun = dnorm, args = list(mean = mean(ToothGrowth$len),
sd = sd(ToothGrowth$len)), color = "red")
p3 = p3 + labs(x = "Tooth length", y = "Density",
title = "Comparison of empirical density function with theoretical one for different doses")
p3
p3 = ggplot(ToothGrowth, aes(x = len)) + facet_grid(. ~ dose)
p3 = p3 + geom_histogram(aes(y = ..density..), bins = 40, color = "black", fill = "white")
p3 = p3 + stat_function(fun = dnorm, args = list(mean = mean(ToothGrowth$len),
sd = sd(ToothGrowth$len)), color = "red")
p3 = p3 + labs(x = "Tooth length", y = "Density",
title = "Empirical density function for different doses")
p3
p3 = ggplot(ToothGrowth, aes(x = len)) + facet_grid(. ~ dose)
p3 = p3 + geom_histogram(bins = 40, color = "black", fill = "white")
p3 = p3 + labs(x = "Tooth length", y = "Density",
title = "Empirical density function for different doses")
p3
p3 = ggplot(ToothGrowth, aes(x = len)) + facet_grid(. ~ dose)
p3 = p3 + geom_histogram(bins = 40, color = "black", fill = "white")
p3 = p3 + labs(x = "Tooth length", y = "Density",
title = "Empirical density function for different doses")
p3
p3 = ggplot(ToothGrowth, aes(x = len)) + facet_grid(. ~ dose)
p3 = p3 + geom_histogram(bins = 40, color = "black", fill = "white")
p3 = p3 + labs(x = "Tooth length", y = "Density",
title = "Empirical density function for different doses")
p3
p3 = ggplot(ToothGrowth, aes(x = len)) + facet_grid(. ~ dose)
p3 = p3 + geom_histogram(bins = 40, color = "black", fill = "white")
p3 = p3 + labs(x = "Tooth length", y = "Density",
title = "Empirical density function for different doses")
p3
library(datasets)
data("ToothGrowth")
str(ToothGrowth)
ToothGrowth[ToothGrowth$dose == 0.5 && ToothGrowth$supp == "OJ"]
ToothGrowth[ToothGrowth$dose == 0.5 && ToothGrowth$supp == "OJ",]
head(ToothGrowth)
ToothGrowth[ToothGrowth$dose == 0.5 && ToothGrowth$supp == "VC",]
ToothGrowth[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ",]
mean(ToothGrowth[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ",])
ToothGrowth[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ",]
mean(ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ",])
mean(ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ"])
mean(ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC"])
mean(ToothGrowth$len[ToothGrowth$dose == 1.0 & ToothGrowth$supp == "VC"])
mean(ToothGrowth$len[ToothGrowth$dose == 1.0 & ToothGrowth$supp == "OJ"])
knitr::opts_chunk$set(echo = TRUE)
p3 = ggplot(ToothGrowth, aes(x = len)) + facet_grid(supp ~ dose)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(datasets)
data("ToothGrowth")
ToothGrowth$dose <- factor(ToothGrowth$dose)
summary(ToothGrowth)
p1 = ggplot(data = ToothGrowth, aes(x = dose, y = len)) + geom_boxplot()
p1
p2 = ggplot(data = ToothGrowth, aes(x = dose, y = len)) + geom_boxplot() +
facet_grid(. ~ supp)
p2
p3 = ggplot(ToothGrowth, aes(x = len)) + facet_grid(supp ~ dose)
p3 = p3 + geom_histogram(bins = 40, color = "black", fill = "white")
p3 = p3 + labs(x = "Tooth length", y = "Density",
title = "Empirical density function for different doses")
p3
p3 = ggplot(ToothGrowth, aes(x = len)) + facet_grid(. ~ dose)
p3 = p3 + geom_histogram(bins = 40, color = "black", fill = "white")
p3 = p3 + labs(x = "Tooth length", y = "Density",
title = "Empirical density function for different doses and delivery types")
p3
p3 = ggplot(ToothGrowth, aes(x = len)) + facet_grid(. ~ dose)
p3 = p3 + geom_histogram(bins = 40, color = "black", fill = "white")
p3 = p3 + labs(x = "Tooth length", y = "Density",
title = "Empirical density function for different doses")
p3
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5],
ToothGrowth$len[ToothGrowth$dose == 1],
alternative = "less", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 1],
ToothGrowth$len[ToothGrowth$dose == 2],
alternative = "less", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "OJ"],
ToothGrowth$len[ToothGrowth$dose == 0.5 & ToothGrowth$supp == "VC"],
alternative = "two.sided", var.equal = TRUE)
t.test(ToothGrowth$len[ToothGrowth$dose == 1 & ToothGrowth$supp == "OJ"],
ToothGrowth$len[ToothGrowth$dose == 1 & ToothGrowth$supp == "VC"],
alternative = "two.sided", var.equal = FALSE)
t.test(ToothGrowth$len[ToothGrowth$dose == 2 & ToothGrowth$supp == "OJ"],
ToothGrowth$len[ToothGrowth$dose == 2 & ToothGrowth$supp == "VC"],
alternative = "two.sided", var.equal = FALSE)
install.packages("caret")
library(kernlab)
install.packages("AppliedPredictiveModelling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(Hmisc)
?cut2
data("concrete")
library(caret)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
library(ggplot2)
head(training)
?qplot
row.names(testing)
as.numeric(row.names(testing))
qplot(x = as.numeric(row.names(training)), y = training$CompressiveStrength)
qplot(x = as.numeric(row.names(training)), y = training$CompressiveStrength, colour = training$Cement)
qplot(x = as.numeric(row.names(training)), y = training$CompressiveStrength, colour = training$BlastFurnaceSlag)
qplot(x = as.numeric(row.names(training)), y = training$CompressiveStrength, colour = training$FlyAsh)
qplot(x = as.numeric(row.names(training)), y = training$CompressiveStrength, colour = training$Water)
qplot(x = as.numeric(row.names(training)), y = training$CompressiveStrength, colour = training$Superplasticizer)
qplot(x = as.numeric(row.names(training)), y = training$CompressiveStrength, colour = training$CoarseAggregate)
qplot(x = as.numeric(row.names(training)), y = training$CompressiveStrength, colour = training$FineAggregate)
qplot(x = as.numeric(row.names(training)), y = training$CompressiveStrength, colour = training$Age)
qplot(x = as.numeric(row.names(training)), y = training$CompressiveStrength, colour = training$CompressiveStrength)
ggplot(testing,aes(x = SuperPlasticizer)) + geom_histogram()
ggplot(testing,aes(x = Superplasticizer)) + geom_histogram()
summary(training$Superplasticizer)
summary(testing$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDesease)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- (adData$diagnosis, p = 3/4)[[1]]
inTrain <- (adData$diagnosis, p = 3/4) [[1]]
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
ILcols <- grep("^[Ii][Ll].*", names(training))
preprocObj <- preProcess(training[, ILcols], method=c("center", "scale", "pca"), thresh=0.9)
preprocObj
?confusionMatrix
preprocObj <- preProcess(training[, ILcols], method=c("center", "scale", "pca"), thresh=0.8)
preprocObj
?suppressMessages
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
library(caret)
data("segmentationOriginal")
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Case ~ ., method = "rpart", data = training)
install.packages("e1071", dependencies = TRUE)
library(e1071)
modFit <- train(Case ~ ., method = "rpart", data = training)
library("rattle")
library("Rattle")
install.packages("rattle")
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
names(training)
unique(training$Case)
test1 <- segmentationOriginal[segmentationOriginal$TotalIntenCh2 == 23000 & segmentationOriginal$FiberWidthCh1 == 10 & segmentationOriginal$PerimStatusCh1 == 2]
test1 <- segmentationOriginal[segmentationOriginal$TotalIntenCh2 == 23000 & segmentationOriginal$FiberWidthCh1 == 10 & segmentationOriginal$PerimStatusCh1 == 2,]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
suppressMessages(library(caret))
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6, list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit$finalModel
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data("olive")
olive <- olive[,-1]
newData <- as.data.frame(t(colMeans(olive)))
names(olive)
head(olive)
modFit <- train(Area ~. , method = "rpart", data = olive)
modFit$finalModel
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata = newData[,-1])
library(ElemStatLearn)
data("SAheart")
set.seed(8484)
train = sample(1:dim(SAheart))
train = sample(1:dim(SAheart)[1], size = dim(SAheart), replace = F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(8484)
train = sample(1:dim(SAheart)[1]/2, size = dim(SAheart), replace = F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
modFit <- train(chd ~ age + alcohol + obesity + typea + ldl + tobacco, method = "glm", data = trainSA)
misClass = function(values, prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predTr <- predict(modFit)
misClass(trainSA$chd,predTr)
predTest <- predict(modFit, newdata = testSA)
misClass(testSA$chd, predTest)
modFit <- train(chd ~ age + alcohol + obesity + typea + ldl + tobacco, method = "glm", data = trainSA, family = "binomial")
predTr <- predict(modFit)
misClass(trainSA$chd,predTr)
predTest <- predict(modFit, newdata = testSA)
misClass(testSA$chd, predTest)
data("vowel.train")
data("vowel.test")
head(vowel.train)
library(randomForest)
modFit <- randomForest(y~., data = vowel.train)
order(varImp(modFit), decreasing = TRUE)
varImp(modFit)
?varImp
modFit <- randomForest(y~., data = vowel.train, importance = TRUE)
varImp(modFit)
order(varImp(modFit), decreasing = TRUE)
library(gbm)
install.packages("gbm")
library(gmb)
library(gbm)
library(lubridate)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
install.packages("forecast")
library(forecast)
library(e1071)
data("vowel.test")
data("vowel.train")
head(vowel.test)
class(vowel.test$y)
unique(vowel.test$y)
vowel.test$y <- factor(vowel.test$y)
vowel.train$y <- factor(vowel.train$y)
library(randomForest)
fit1 <- train(y~., method = "rf",data = vowel.train)
set.seed(33833)
fit1 <- train(y~., method = "rf",data = vowel.train)
fit2 <- train(y~., method = "gbm", data = vowel.train)
?train
fit2 <- train(y~., method = "gbm", data = vowel.train)
pred1 <- predict(fit1, newdata = vowel.test)
pred2 <- predict(fit2, newdata = vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred1, vowel.test$y)$overall
confusionMatrix(pred1, vowel.test$y)$overall[1]
confusionMatrix(pred2, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)$overall[1]
predDF <- data.frame(pred1, pred2, y = vowel.test$y)
sum(pred_rf[predDF$pred1 == predDF$pred2] == predDF$y[predDF$pred1 == predDF$pred2])/sum(predDF$pred1 == predDF$pred2)
sum(pred1[predDF$pred1 == predDF$pred2] == predDF$y[predDF$pred1 == predDF$pred2])/sum(predDF$pred1 == predDF$pred2)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
set.seed(62433)
fit_rf <- train(diagnosis~., method = "rf", data = training)
rf_pred <- predict(fit_rf, newdata = testing)
rf_acc <- confusionMatrix(rf_pred, testing$diagnosis)$overall[1]
fit_gbm <- train(diagnosis~., method = "gbm", data = training)
gbm_pred <- predict(fit_gbm, newdata = testing)
gbm_acc <- confusionMatrix(gbm_pred, testing$diagnosis)$overall[1]
fit_lda <- train(diagnosis~., method = "lda", data = training)
lda_pred <- predict(fit_lda, newdata = testing)
lda_acc <- confusionMatrix(lda_pred, testing$diagnosis)$overall[1]
predDF <- data.frame(rf_pred, gbm_pred, lda_pred, testing$diagnosis)
fit_comb <- train(diagnosis~., method = "rf", data = predDF)
View(predDF)
predDF <- data.frame(rf_pred, gbm_pred, lda_pred, diagnosis = testing$diagnosis)
fit_comb <- train(diagnosis~., method = "rf", data = predDF)
comb_pred <- predict(fit_comb, predDF)
confusionMatrix(comb_pred, testing$diagnosis)$overall[1]
set.seed(3523)
data("concrete")
inTrain <- createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training <- concrete[inTrain,]
testing <- concrete[-inTrain]
testing <- concrete[-inTrain,]
set.seed(233)
fit <- train(CompressiveStrength~., data = training, method = "lasso")
library(elasticnet)
fit <- train(CompressiveStrength~., data = training, method = "lasso")
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(fit$finalModel, xvar = "penalty", use.color = TRUE)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv",temp)
dat <- read.csv(temp)
dat <- read.csv(temp, stringsAsFactors = FALSE)
dat$date <- as.Date(dat$date)
head(year(dat$date))
training <- dat[year(dat$date) < 2012,]
testing <- dat[year(dat$date) > 2011,]
tstrain <- ts(training$visitsTumblr)
fit <- bats(tstrain)
?forecast
dim(testing)[1]
dim(testing)
fcast <- forecast(fit, level = 95, h = nrow(testing))
nrow(testing)
head(fcast$lower)
sum(fcast$lower < testing$visitsTumblr & fcast$upper > testing$visitsTumblr)/nrow(testing)
set.seed(325)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
set.seed(3523)
data("concrete")
inTrain <- createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training <- concrete[inTrain,]
testing <- concrete[-inTrain,]
set.seed(325)
fit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict(fit, testing)
accuracy(pred,testing$CompressiveStrength)
?nearZerovar
knitr::opts_chunk$set(echo = TRUE)
trainingFile <- tempfile()
testingFile <- tempfile()
trainingFileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingFileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(trainingFileURL, trainingFile)
download.file(testingFileURL, testingFile)
trainingData <- read.csv(trainingFile)
testingData <- read.csv(testingFile)
unlink(trainingFile)
unlink(testingFile)
library(caret)
library(ggplot2)
View(testingData)
View(trainingData)
View(testingData)
trainingData$classe
apply(trainingData,2,is.na)
apply(trainingData,2,anyNA)
sum(apply(trainingData,2,anyNA))
sum(apply(testingData,2,anyNA))
sum(apply(testingData,2,anyNA) | apply(trainingData,2,anyNA))
trainingFile <- tempfile()
testingFile <- tempfile()
trainingFileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingFileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(trainingFileURL, trainingFile)
download.file(testingFileURL, testingFile)
trainingData <- read.csv(trainingFile, na.strings = c("NA",""))
testingData <- read.csv(testingFile, na.strings = c("NA",""))
unlink(trainingFile)
unlink(testingFile)
sum(apply(testingData,2,anyNA) | apply(trainingData,2,anyNA))
colFilter <- (apply(testingData,2,anyNA) | apply(trainingData,2,anyNA))
testingProcData <- testingData[,!colFilter]
trainingProcData <- trainingData[,!colFilter]
library(randomForest)
set.seed(1987)
idTrain<- createDataPartition(trainingProcData$classe, p=3/4, list=FALSE)
train <- trainingProcData[idTrain,]
test <- testingProcData[-idTrain,]
set.seed(1987)
idTrain<- createDataPartition(trainingProcData$classe, p=0.75, list=FALSE)
train <- trainingProcData[idTrain,]
test <- testingProcData[-idTrain,]
set.seed(19878)
idTrain<- createDataPartition(trainingProcData$classe, p=0.75, list=FALSE)
train <- trainingProcData[idTrain,]
test <- testingProcData[-idTrain,]
set.seed(19878)
idTrain<- createDataPartition(y = trainingProcData$classe, p=0.75, list=FALSE)
train <- trainingProcData[idTrain,]
test <- testingProcData[-idTrain,]
set.seed(1988)
inTrain<- createDataPartition(y = trainingProcData$classe, p=0.75, list=FALSE)
train <- trainingProcData[inTrain,]
test <- testingProcData[-inTrain,]
trainingProcData$classe
set.seed(1988)
inTrain <- createDataPartition(y = trainingProcData$classe, p=0.75, list=FALSE)
training <- trainingProcData[inTrain,]
testing <- testingProcData[-inTrain,]
View(testing)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(ggplot2)
library(randomForest)
trainingFile <- tempfile()
testingFile <- tempfile()
trainingFileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingFileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(trainingFileURL, trainingFile)
download.file(testingFileURL, testingFile)
trainingData <- read.csv(trainingFile, na.strings = c("NA",""))
testingData <- read.csv(testingFile, na.strings = c("NA",""))
unlink(trainingFile)
unlink(testingFile)
colFilter <- (apply(testingData,2,anyNA) | apply(trainingData,2,anyNA))
testingProcData <- testingData[,!colFilter]
trainingProcData <- trainingData[,!colFilter]
set.seed(19)
inTrain <- createDataPartition(y = trainingProcData$classe, p=0.75, list=FALSE)
training <- trainingProcData[inTrain,]
testing <- testingProcData[-inTrain,]
inTrain
-inTrain
trainingProcData[-inTrain]
trainingProcData[-inTrain,]
testing <- trainingProcData[-inTrain,]
training$classe
View(training)
names(testing)[ncol(testing)]
cvResults <- rfcv(trainx = training[,-ncol(training)], trainy = training[,ncol(training)], cv.fold = 5)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(ggplot2)
library(randomForest)
trainingFile <- tempfile()
testingFile <- tempfile()
trainingFileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingFileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(trainingFileURL, trainingFile)
download.file(testingFileURL, testingFile)
trainingData <- read.csv(trainingFile, na.strings = c("NA",""))
testingData <- read.csv(testingFile, na.strings = c("NA",""))
unlink(trainingFile)
unlink(testingFile)
colFilter <- (apply(testingData,2,anyNA) | apply(trainingData,2,anyNA))
testingProcData <- testingData[,!colFilter]
trainingProcData <- trainingData[,!colFilter]
set.seed(19)
inTrain <- createDataPartition(y = trainingProcData$classe, p=0.75, list=FALSE)
training <- trainingProcData[inTrain,]
testing <- trainingProcData[-inTrain,]
cvResults <- rfcv(trainx = training[,-ncol(training)], trainy = training[,ncol(training)], cv.fold = 10)
fit <- train(classe ~ ., data = training, method = "rf", trControl = trainControl(method = "cv", number = 5))
fit <- rfcv(trainx = training[,-ncol(training)], trainy = training[,ncol(training)], cv.fold = 50)
cvResults <- rfcv(trainx = training[,-ncol(training)], trainy = training[,ncol(training)], cv.fold = 50)
fit <- train(classe ~., method="rf", data=training, trControl=trainControl(method='cv', number = 5), allowParallel=TRUE, importance=TRUE )
View(testingProcData)
fit <- train(classe ~., method="rf", data=training, trControl=trainControl(method='cv', number = 5), allowParallel=TRUE, importance=TRUE )
View(testingProcData)
View(testing)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(ggplot2)
library(randomForest)
trainingFile <- tempfile()
testingFile <- tempfile()
trainingFileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingFileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(trainingFileURL, trainingFile)
download.file(testingFileURL, testingFile)
trainingData <- read.csv(trainingFile, na.strings = c("NA",""))
testingData <- read.csv(testingFile, na.strings = c("NA",""))
unlink(trainingFile)
unlink(testingFile)
colFilter <- (apply(testingData,2,anyNA) | apply(trainingData,2,anyNA))
testingProcData <- testingData[,!colFilter]
trainingProcData <- trainingData[,!colFilter]
testingProcData <- testingProcData[,-c(1:5)]
trainingProcData <- trainingProcData[,-c(1:5)]
set.seed(19)
inTrain <- createDataPartition(y = trainingProcData$classe, p=0.75, list=FALSE)
training <- trainingProcData[inTrain,]
testing <- trainingProcData[-inTrain,]
cvResults <- rfcv(trainx = training[,-ncol(training)], trainy = training[,ncol(training)], cv.fold = 50)
fit <- train(classe ~., method="rf", data=training, trControl=trainControl(method='cv', number = 10), allowParallel=TRUE, importance=TRUE )
save.image("~/Data_Science/8.Machine_Learning/Course_project/Data.RData")
library(caret)
?train
setwd("~/Data_Science/8.Machine_Learning/Course_project")
load("Data.RData")
fit
